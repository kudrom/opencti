type PublicDashboard implements InternalObject & BasicObject {
  id: ID!  @auth(for: [KNOWLEDGE, EXPLORE])
  entity_type: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  standard_id: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  parent_types: [String!]! @auth(for: [KNOWLEDGE, EXPLORE])
  # PublicDashboard
  name: String!
  description: String
  dashboard_id: String  @auth(for: [KNOWLEDGE, EXPLORE])
  user_id: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  public_manifest: String
  private_manifest: String @auth(for: [KNOWLEDGE, EXPLORE])
  published_until: DateTime
  uri_key: String  @auth(for: [KNOWLEDGE, EXPLORE])
  max_marking: [MarkingDefinition!]  @auth(for: [KNOWLEDGE, EXPLORE])
  created_at: DateTime
  updated_at: DateTime
  editContext: [EditUserContext!]  @auth(for: [KNOWLEDGE, EXPLORE])
}

# Queries
type Query {
  publicDashboard(id: String!): PublicDashboard  @auth(for: [KNOWLEDGE, EXPLORE])
  publicDashboardPublic(uri_key: String!): PublicDashboard
}

# Mutation
input PublicDashboardAddInput {
  name: String!
  description: String
  dashboard_id: String!
}

type Mutation {
  publicDashboardAdd(input: PublicDashboardAddInput!): PublicDashboard @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
  publicDashboardDelete(id: ID!): ID @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
  publicDashboardFieldPatch(id: ID!, input: [EditInput!]!): PublicDashboard @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
}

